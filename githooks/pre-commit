#!/bin/bash

# Check	if the golang code compiles

cd $(git rev-parse --show-toplevel)
! make build >/dev/null && echo "Il tuo codice Go non compila! Controlla i messaggi del compilatore" && exit 1

# Format html and xml source code

htmlfiles=$(git diff --name-only --cached --diff-filter=ACM | grep '\.html$')
[ -z "$htmlfiles" ] || tidy -qimc -w 90 --output-bom no --tidy-mark no --clean yes --logical-emphasis yes --indent-attributes yes --vertical-space yes $htmlfiles

xmlfiles=$(git diff --name-only --cached --diff-filter=ACM | grep '\.xml$')
[ -z "$xmlfiles" ] || tidy -qimc -w 90 -xml --output-bom no --clean yes --logical-emphasis yes --indent-attributes yes --vertical-space yes $xmlfiles

git add $htmlfiles $xmlfiles

# Check if the golang code is well-formatted

gofiles=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$')
[ -z "$gofiles" ] && exit 0

unformatted=$(gofmt -l $gofiles)
[ -z "$unformatted" ] && exit 0

# Some files are not gofmt'd. Print message and fail.

echo >&2 "Il codice sorgente Go dev'essere formattato con gofmt. Esegui:"
for fn in $unformatted; do
	echo >&2 "  gofmt -w $PWD/$fn"
done
echo "Infine esegui git add <files> e git commit -m \"descrizione\""

exit 1
